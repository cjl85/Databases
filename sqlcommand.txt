Use the commands above to complete the following tasks, and submit the SQL statements. Real-world examples must be distinct from those used in the text.

1) List the commands for adding, updating, and deleting data.

- INSERT INTO
- UPDATE
- DELETE

2) Explain the structure for each type of command.

- Specifies in the table where the new data should be added
- Modifies existing records within a table
- Deletes an entry from a table

3) What are some of the data types that can be used in tables? Give a real-world example of each type.

Integer - Phone numbers, Employee ID#, how many vehicles sold

Timestamp - Displaying birthdays, chat log, pictures

Character - 3 letter abbreviations, Model #s for products


4) Decide how to create a new table to hold a list of people invited to a wedding dinner. The table needs to have first and last names, whether they sent in their RSVP, the number of guests they are bringing, and the number of meals (1 for adults and 1/2 for children).

Which data type would you use to store each of the following pieces of information?
First and last name.
Whether they sent in their RSVP.
Number of guests.
Number of meals.
Write a command that creates the table to track the wedding dinner.
Write a command that adds a column to track whether the guest sent a thank you card.
You have decided to move the data about the meals to another table, so write a command to remove the column storing the number meals from the wedding table.
The guests will need a place to sit at the reception, so write a command that adds a column for table number.
The wedding is over and we do not need to keep this information, so write a command that deletes the table numbers from the database.

First and last name. - text or char
Whether they sent in their RSVP. - boolean
Number of guests. - smallint
Number of meals. - numeric

CREATE TABLE wedding_dinner (
  first_name TEXT,
   last_name TEXT,
    has_rsvp BOOLEAN,
 guest_count SMALLINT,
  meal_count NUMERIC
);

ALTER TABLE wedding_dinner
  ADD COLUMN sent_thank_you BOOLEAN;

ALTER TABLE wedding_dinner
  DROP COLUMN meal_count;

ALTER TABLE wedding_dinner
  ADD COLUMN table_number SMALLINT;

ALTER TABLE wedding_dinner
  DROP COLUMN table_number;

5) Write a command to create a new table to hold the books in a library with the columns ISBN, title, author, genre, publishing date, number of copies, and available copies.

CREATE TABLE books (
  isbn             CHARACTER,
  title            TEXT,
  author           TEXT,
  genre            TEXT,
  date_published   DATA DATE,
  total_copies     SMALLINT,
  available_copies SMALLINT
);

Find three books and add their information to the table.
Someone has just checked out one of the books. Change the number of available copies to 1 fewer.
Now one of the books has been added to the banned books list. Remove it from the table.

INSERT INTO books
    (isbn, title, author, genre, date_published, total_copies, available_copies)
  VALUES
    ('12345', 'Batman', 'Wayne, Bruce', 'Fiction', '2000-03-03', 3, 2),
    ('23456', 'Superman', 'Kent, Clark', 'Fiction', '2003-03-27', 4, 3),
    ('34567', 'Spiderman', 'Parker, Peter', 'Fiction', '2002-05-30', 1, 0);

UPDATE books
    SET available_copies = 1
    WHERE isbn = '12345';

DELETE FROM books
    WHERE isbn = '34567';

6) Write a command to make a new table to hold spacecrafts. Information should include id, name, year launched, country of origin, a brief description of the mission, orbiting body, if it is currently operating, and its approximate miles from Earth. In addition to the table creation, provide commands that perform the following operations:

CREATE TABLE spacecrafts (
  id CHARACTER,
  name TEXT,
  year_launched SMALLINT,
  origin CHARACTER,
  mission TEXT,
  orbiting TEXT,
  is_operating BOOLEAN,
  distance INTEGER
);

Add three non-Earth-orbiting satellites to the table.
Remove one of the satellites from the table since it has just crashed into the planet.
Edit another satellite because it is no longer operating and change the value to reflect that.

INSERT INTO spacecrafts
    (id, name, launch_year, origin, mission, orbiting, is_operating,   distance)
  VALUES
    ('1', 'Pluto', 2000, 'USA',
      'Orbit Mars',
      'Pluto', TRUE, 3823998),
    ('2', 'Neptune', 1999, 'RUS',
      'Orbit Neptune',
      'Mars', TRUE, 3583438),
    ('3', 'Mars', 1983, 'CNA',
      'Orbit Mars',
      'Mars', TRUE, 8483923);


DELETE FROM spacecrafts
  WHERE id = '1';

UPDATE spacecrafts
  SET is_operating = FALSE
  WHERE id = '2;


7) Write a command to create a new table to hold the emails in your inbox. This table should include an id, the subject line, the sender, any additional recipients, the body of the email, the timestamp, whether or not you have read the email, and the id of the email chain it's in. Also provide commands that perform the following operations:

CREATE TABLE inbox (
  id INTEGER,
  sender TEXT,
  recipients TEXT,
  subject TEXT,
  body TEXT,
  sent_at TIMESTAMP,
  is_read BOOLEAN,
  chain_id INTEGER
);

Add three new emails to the inbox.
You deleted one of the emails, so write a command to remove the row from the inbox table.
You started reading an email but just heard a crash in another room. Mark the email as unread before investigating the crash, so you can come back and read it later.

INSERT INTO inbox
  VALUES
    (1, 'def', 'def2',
      'Homework',
      'Do you do the HW assignment?',
      '2013-03-13 09:42:00 -7:00', TRUE, 10),
    (2, 'ref', 'ref2',
      'Test',
      'How's it going?',
      '2011-05-13 09:44:00 -7:00', FALSE, 11),
    (3, 'cef', 'cef',
      'Tutor',
      'I'll be ready to tutor tomorrow',
      '2013-09-05 10:39:00 -7:00', TRUE, 31);

DELETE FROM inbox
    WHERE id = 1;

UPDATE inbox
    SET is_read = FALSE
    WHERE id = 3;
