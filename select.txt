1) Write out a generic SELECT statement.

SELECT model
FROM cars
WHERE model LIKE '%ACCORD%';

2) Create a fun way to remember the order of operations in a SELECT statement, such as a mnemonic.

(S)elect (F)rom (W)here - SFW it up

3) Given this dogs table, write queries to select the following pieces of data:

Intake teams typically guess the breed of shelter dogs, so the breed column may have multiple words (for example, "Labrador Collie mix").

Display the name, gender, and age of all dogs that are part Labrador.

SELECT name, gender, age
FROM dogs
WHERE breed LIKE '%labrador%';

Display the ids of all dogs that are under 1 year old.

SELECT id
FROM dogs
WHERE age < 1;

Display the name and age of all dogs that are female and over 35lbs.

SELECT name, age
FROM dogs
WHERE gender = 'F' AND weight > 35;

Display all of the information about all dogs that are not Shepherd mixes.

SELECT *
FROM dogs
WHERE breed NOT LIKE '%shepherd%';

Display the id, age, weight, and breed of all dogs that are either over 60lbs or Great Danes.

SELECT id, age, weight, breed
FROM dogs
WHERE weight > 60 OR breed LIKE '%great dane%';

4) Given this cats table, what records are returned from these queries?

SELECT name, adoption_date
FROM cats


| name     | adoption_date            |
| -------- | ------------------------ |
| Mushi    | 2016-03-22T00:00:00.000Z |
| Seashell |                          |
| Azul     | 2016-04-17T00:00:00.000Z |
| Victoire | 2016-09-01T00:00:00.000Z |
| Nala     |                          |


SELECT name, age FROM cats;

| name     | age |
| -------- | --- |
| Mushi    | 1   |
| Seashell | 7   |
| Azul     | 3   |
| Victoire | 7   |
| Nala     | 1   |


5) From the cats table, write queries to select the following pieces of data.
Display all the information about all of the available cats.

SELECT *
FROM cats;

Display the name and sex of all cats who are 7 years old.

SELECT name, gender
FROM cats
WHERE age = 7;

Find all of the names of the cats, so you don’t choose duplicate names for new cats.

SELECT DISTINCT names
FROM cats;

6) List each comparison operator and explain when you would use it. Include a real world example for each.
If you can’t list these from memory, do these flashcards until you can!

= equal , to compare values

WHERE model = ‘honda’

> greater than, to compare values

WHERE age > 8

<  lower than , to compare values

WHERE  number < 80

>= greater or equal than , to compare values

WHERE  number >= 10

<= lower or equal than , to compare values

WHERE number <= 15

!= not equal to, to compare values

WHERE height != 6

<> greater than or lower than

WHERE company_cars < 100 OR > 40

BETWEEN returns true if the statement is within a range.

WHERE range BETWEEN 14 AND 38

OR one of the expressions need to be true to be returned.

WHERE car = ‘Lexus’ or car = ‘Honda’

NOT only returns row if the expression is false.

WHERE NOT number < 30

AND return row(s) if all the conditions separated by the AND are true.

WHERE  state = 'Colorado' AND city = ‘Denver’

IS NULL checks if cell is null or not.

WHERE row IS NULL

EXISTS evaluates to true if subquery return something.

WHERE EXISTS(SELECT Age FROM People WHERE Job_Positions > 20)

LIKE search for partial match.

WHERE column1 LIKE ‘%b%’

IS DISTINCT FROM return only distinct values without duplicates.

SELECT DISTINCT Tables FROM Storage

7) From the cats table, what data is returned from these queries?

SELECT name
FROM cats
WHERE gender = ‘F’;

| name     |
| -------- |
| Seashell |
| Nala     |


SELECT name
FROM cats
WHERE age <> 3;

| name     |
| -------- |
| Mushi    |
| Seashell |
| Victoire |
| Nala     |


SELECT id
FROM cats
WHERE name != ‘Mushi’ AND gender = ‘M’;

| id  |
| --- |
| 3   |
| 4   |
