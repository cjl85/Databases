1) What data types do each of these values represent?

"A Clockwork Orange" - String
42 - Integer/Number
09/02/1945 - Integer/Date
98.7 - Float
$15.99 - Float/Currency

2) Explain when a database would be used. Explain when a text file would be used.

Databases are used to store large amounts of data that can be quickly read and modified. Databases are stored in binary format which can only be read by the computer.

Text files should be used to store data that can be read by any developer/human.

3) Describe one difference between SQL and other programming languages.

Unlike other other languages, SQL is declarative and not procedural.

This allows us to concern ourselves with what we want to find out, rather than how the database should find it. We don't have to define an algorithm for how the database should search; instead, we tell the database what we are looking for and the database engine determines the most efficient way to return that data.

4) In your own words, explain how the pieces of a database system fit together at a high level.

A database is a piece of software that stores structured data and provides a means to access that data. A database saves information in a machine-readable format that allows it to efficiently store, search, and analyze data of various data types. It also provides or exposes a means to add, modify, and delete data; perhaps via a command line interface, a graphical user interface, or remotely via an API.

5) Explain the meaning of table, row, column, and value.

Table: Structure that holds a collection of related data
Row:  Horizontal collection of a conceptual unit
Column: Vertical definition what the data represents
Value: Data contained in a cell

6) List three data types that can be used in a table.

 String
 Float
 Integer

 7)

 SELECT date, amount
 FROM payments;

 **Schema (PostgreSQL v9.6)**

    CREATE TABLE payments(
      "date"   DATE,
      "payee"  VARCHAR(32),
      "amount" DECIMAL(13,4),
      "memo"   TEXT
    );

    INSERT INTO payments
      ("date",       "payee",                "amount", "memo")
    VALUES
      ('2016-05-01', 'West Hill Apartments',  1500.00, 'Rent'),
      ('2016-05-10', 'Best Toy Store',        37.00,   'Beanie Babies'),
      ('2016-05-15', 'Mega Foods',            124.93,  'Groceries'),
      ('2016-05-23', 'Shoes R Cool',          54.72,   'Athletic shoes');


---

**Query #1**

    SELECT date, amount
    FROM payments;

| date                     | amount    |
| ------------------------ | --------- |
| 2016-05-01T00:00:00.000Z | 1500.0000 |
| 2016-05-10T00:00:00.000Z | 37.0000   |
| 2016-05-15T00:00:00.000Z | 124.9300  |
| 2016-05-23T00:00:00.000Z | 54.7200   |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/5gVGFmB8Aq66SejCFEbfdd/0)

 Query - look up the date/amount from the payments table.

 SELECT amount
 FROM payments
 WHERE amount > 500;

 **Schema (PostgreSQL v9.6)**

    CREATE TABLE payments(
      "date"   DATE,
      "payee"  VARCHAR(32),
      "amount" DECIMAL(13,4),
      "memo"   TEXT
    );

    INSERT INTO payments
      ("date",       "payee",                "amount", "memo")
    VALUES
      ('2016-05-01', 'West Hill Apartments',  1500.00, 'Rent'),
      ('2016-05-10', 'Best Toy Store',        37.00,   'Beanie Babies'),
      ('2016-05-15', 'Mega Foods',            124.93,  'Groceries'),
      ('2016-05-23', 'Shoes R Cool',          54.72,   'Athletic shoes');


---

**Query #1**

    SELECT amount
    FROM payments
    WHERE amount > 500;

| amount    |
| --------- |
| 1500.0000 |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/5gVGFmB8Aq66SejCFEbfdd/0)

 Query - look up the amount from the payment table, where the
 amount is greater or higher than 500.

 SELECT *
 FROM payments
 WHERE payee = 'Mega Foods';

 **Schema (PostgreSQL v9.6)**

    CREATE TABLE payments(
      "date"   DATE,
      "payee"  VARCHAR(32),
      "amount" DECIMAL(13,4),
      "memo"   TEXT
    );

    INSERT INTO payments
      ("date",       "payee",                "amount", "memo")
    VALUES
      ('2016-05-01', 'West Hill Apartments',  1500.00, 'Rent'),
      ('2016-05-10', 'Best Toy Store',        37.00,   'Beanie Babies'),
      ('2016-05-15', 'Mega Foods',            124.93,  'Groceries'),
      ('2016-05-23', 'Shoes R Cool',          54.72,   'Athletic shoes');


---

**Query #1**

    SELECT *
    FROM payments
    WHERE payee = 'Mega Foods';

| date                     | payee      | amount   | memo      |
| ------------------------ | ---------- | -------- | --------- |
| 2016-05-15T00:00:00.000Z | Mega Foods | 124.9300 | Groceries |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/5gVGFmB8Aq66SejCFEbfdd/0)

 Query - look up all info/data from the payments table,
 that are related to the payee called 'Mega Foods'

 8)

Given this users table, write SQL queries using the following criteria and include the output:

The email and sign-up date for the user named DeAndre Data.
The user ID for the user with email 'aleesia.algorithm@uw.edu'.
All the columns for the user ID equal to 4.

SELECT email, signup
FROM users
WHERE name = 'DeAndre Data';

**Schema (PostgreSQL v9.6)**

    CREATE TABLE users(
      "userid" INTEGER,
      "name"   VARCHAR(32),
      "email"  VARCHAR(64),
      "signup" DATE
    );

    INSERT INTO users
        ("userid", "name",              "email",                        "signup")
    VALUES
        ( 1,       'Aleesia Algorithm', 'aleesia.algorithm@uw.edu',     '2014-10-24'),
        ( 2,       'DeAndre Data',      'datad@comcast.net',            '2008-01-20'),
        ( 3,       'Chris Collection',  'chris.collection@outlook.com', '2012-01-20'),
        ( 4,       'Brandy Boolean',    'bboolean@nasa.gov',            '1999-10-15');


---

**Query #1**

    SELECT email, signup
    FROM users
    WHERE name = 'DeAndre Data';

| email             | signup                   |
| ----------------- | ------------------------ |
| datad@comcast.net | 2008-01-20T00:00:00.000Z |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/iQAEYktwysXqcLQHv2dwbc/0)



SELECT user ID, email
FROM users
WHERE email = 'aleesia.algorithm@uw.edu';

**Schema (PostgreSQL v9.6)**

    CREATE TABLE users(
      "userid" INTEGER,
      "name"   VARCHAR(32),
      "email"  VARCHAR(64),
      "signup" DATE
    );

    INSERT INTO users
        ("userid", "name",              "email",                        "signup")
    VALUES
        ( 1,       'Aleesia Algorithm', 'aleesia.algorithm@uw.edu',     '2014-10-24'),
        ( 2,       'DeAndre Data',      'datad@comcast.net',            '2008-01-20'),
        ( 3,       'Chris Collection',  'chris.collection@outlook.com', '2012-01-20'),
        ( 4,       'Brandy Boolean',    'bboolean@nasa.gov',            '1999-10-15');


---

**Query #1**

    SELECT user ID, email
    FROM users
    WHERE email = 'aleesia.algorithm@uw.edu';

| id   | email                    |
| ---- | ------------------------ |
| test | aleesia.algorithm@uw.edu |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/iQAEYktwysXqcLQHv2dwbc/0)

SELECT *
FROM users
WHERE userid = 4;

**Schema (PostgreSQL v9.6)**

    CREATE TABLE users(
      "userid" INTEGER,
      "name"   VARCHAR(32),
      "email"  VARCHAR(64),
      "signup" DATE
    );

    INSERT INTO users
        ("userid", "name",              "email",                        "signup")
    VALUES
        ( 1,       'Aleesia Algorithm', 'aleesia.algorithm@uw.edu',     '2014-10-24'),
        ( 2,       'DeAndre Data',      'datad@comcast.net',            '2008-01-20'),
        ( 3,       'Chris Collection',  'chris.collection@outlook.com', '2012-01-20'),
        ( 4,       'Brandy Boolean',    'bboolean@nasa.gov',            '1999-10-15');


---

**Query #1**

    SELECT *
    FROM users
    WHERE userid = 4;

| userid | name           | email             | signup                   |
| ------ | -------------- | ----------------- | ------------------------ |
| 4      | Brandy Boolean | bboolean@nasa.gov | 1999-10-15T00:00:00.000Z |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/iQAEYktwysXqcLQHv2dwbc/0)
